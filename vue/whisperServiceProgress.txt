<template>
  <div class="vueMediaRecorder">
    <vue-media-recorder> </vue-media-recorder>
  </div>
  <div class="container">
    <button @click="toggleRecording">{{ recording ? 'Stop Recording' : 'Start Recording' }}</button>

    <div v-if="audioUrl">
      <audio ref="audioPlayer" :src="audioUrl" controls></audio>
      <button @click="openModal">Replay Recording</button>
    </div>

    <button @click="exportRecording" v-if="!recording && audioBlob">Export Recording</button>

    <div v-if="showModal" class="modal">
      <div class="modal-content">
        <span class="close" @click="closeModal">&times;</span>
        <audio ref="modalAudioPlayer" :src="audioUrl" controls></audio>
      </div>
    </div>
  </div>
</template>

<script>
import axios from 'axios';
import WhisperService from '@/services/WhisperService';
// import VueMediaRecorder from 'vue-media-recorder';

// export default {
//   data() {
//     return {
//       recording: false,
//       audioUrl: null,
//       audioBlob: null,
//       showModal: false,
//     };
//   },
//   components: {
//     VueMediaRecorder,
//   },
//   methods: {
//     toggleRecording() {
//       this.recording = !this.recording;
//     },
//     handleRecording(data) {
//       this.audioUrl = URL.createObjectURL(data.blob);
//       this.audioBlob = data.blob;
//     },
//     openModal() {
//       this.showModal = true;
//     },
//     closeModal() {
//       this.showModal = false;
//     },
//     exportRecording() {
//       // Implement your export logic here
//     },
//   },
// };

export default {
  data() {
    return {
      recording: false,
      audioChunks: [],
      audioBlob: null,
      audioUrl: null,
      showModal: false,
      recordingText: "",
      testRecording: "../assets/test-recording.m4a"
    };
  },
  // components: {
  //   VueMediaRecorder,
  // },
  methods: {
    toggleRecording() {
      if (this.recording) {
        this.stopRecording();
      } else {
        this.startRecording();
      }
    },
    startRecording() {
      navigator.mediaDevices.getUserMedia({ audio: true })
        .then(stream => {
          this.recording = true;
          this.audioChunks = [];
          this.audioBlob = null;
          this.audioUrl = null;

          this.mediaRecorder = new MediaRecorder(stream);
          this.mediaRecorder.addEventListener('dataavailable', event => {
            if (event.data.size > 0) {
              this.audioChunks.push(event.data);
            }
          });
          this.mediaRecorder.start();
        })
        .catch(error => {
          console.error('Error accessing microphone:', error);
        });
    },
    stopRecording() {
      this.mediaRecorder.stop();
      this.recording = false;
      this.audioBlob = new Blob(this.audioChunks, { type: 'audio/*' });
      this.audioUrl = URL.createObjectURL(this.audioBlob);
      this.audioChunks = []; // Clear the audio chunks array
    },
    exportRecording() {
      // // Use Axios to make HTTP requests
      // const apiUrl = 'https://your-api-endpoint';
      // const formData = new FormData();
      // formData.append('audio', this.audioBlob, 'recording.wav');

      // axios.post(apiUrl, formData, {
      //   headers: {
      //     'Content-Type': 'multipart/form-data',
      //   },
      // })
      //   .then(response => {
      //     // Handle the response from the API
      //     console.log(response.data);
      //   })
      //   .catch(error => {
      //     console.error('Error sending audio to API:', error);
      //   });
      WhisperService.whisperCall(this.audioBlob).then(response => {
        console.log(response.data);
        this.recordingText = response.data;
      }).catch(error => {
        console.error('You\'ve entered whisperCall but the API call failed', error);
      });
    },
    openModal() {
      this.showModal = true;
      this.$nextTick(() => {
        const modalAudioPlayer = this.$refs.modalAudioPlayer;
        modalAudioPlayer.currentTime = 0;
        modalAudioPlayer.play();
      });
    },
    closeModal() {
      this.showModal = false;
    },
  },
  mounted() {
    if (!navigator.mediaDevices || !navigator.mediaDevices.getUserMedia) {
      console.error('getUserMedia is not supported in this browser');
    }
  },
};
</script>

<style scoped>
.container {
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  height: 100vh;
}

.modal {
  display: block;
  position: fixed;
  z-index: 1;
  left: 0;
  top: 0;
  width: 100%;
  height: 100%;
  background-color: rgba(0, 0, 0, 0.5);
}

.modal-content {
  background-color: #fefefe;
  margin: 15% auto;
  padding: 20px;
  border: 1px solid #888;
  width: 80%;
  max-width: 600px;
  text-align: center;
}

.close {
  color: #aaa;
  float: right;
  font-size: 28px;
  font-weight: bold;
  cursor: pointer;
}

.close:hover,
.close:focus {
  color: black;
  text-decoration: none;
  cursor: pointer;
}
</style>